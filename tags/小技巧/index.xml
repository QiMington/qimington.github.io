<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>小技巧 - 标签 - QiMington's</title><link>/tags/%E5%B0%8F%E6%8A%80%E5%B7%A7/</link><description>小技巧 - 标签 - QiMington's</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Sun, 06 Nov 2022 12:02:40 +0800</lastBuildDate><atom:link href="/tags/%E5%B0%8F%E6%8A%80%E5%B7%A7/" rel="self" type="application/rss+xml"/><item><title>Vue3小知识</title><link>/posts/vue/vue%E5%B0%8F%E7%9F%A5%E8%AF%86/</link><pubDate>Sun, 06 Nov 2022 12:02:40 +0800</pubDate><author>QiMington</author><guid>/posts/vue/vue%E5%B0%8F%E7%9F%A5%E8%AF%86/</guid><description>npm install 常用的-S 、-D 、-g 有什么区别 npm install 本身就有一个别名 npm i
npm i module_name -S 即 npm install module_name &amp;ndash;save 写入dependencies，发布到生产环境 npm i module_name -D 即 npm install module_name &amp;ndash;save-dev 写入devDependencies，发布到开发环境 npm i module_name -g 即 global全局安装(命令行使用) npm i module_name 即 本地安装(将安装包放在 ./node_modules 下) vue，vue-cli和@vue/cli是什么关系？有什么区别？ vue是构建用户界面的渐进式JavaScript 框架。
vue-cli是vue的一个官方脚手架工具（快速工程化命令工具）, 用来帮助程序员们快速搭建基于vue框架的开发环境。
vue有很多脚手架工具，vue-cli只是其中一种，侧重于单页面应用 (SPA) 的快速搭建，网址：cli.vuejs.org/zh/guide/
@vue/cli是新版vue-cli，提供了GUI维护界面，@vue/cli 安装的是vue3及以上版本, vue-cli 安装的是vue2。
扩展：
Vue-cli = Vue + 一堆的js插件。 SpringCloud = SpringBoot + 一堆第三方组件。 vue-cli 4.</description></item><item><title>误删root用户解决办法</title><link>/posts/mysql/%E8%AF%AF%E5%88%A0root%E7%94%A8%E6%88%B7%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</link><pubDate>Fri, 21 Oct 2022 22:22:40 +0800</pubDate><author>QiMington</author><guid>/posts/mysql/%E8%AF%AF%E5%88%A0root%E7%94%A8%E6%88%B7%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</guid><description>方法1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 # 1.关掉mysql服务 net stop mysql # 此处为win环境 linux为service stop mysql; # 2.用cmd用管理员的方式进入到mysql的安装路径下的bin，执行： mysqld --console --skip-grant-tables --shared-memory # 保留该窗口 # 3.重开cmd，无密码进入mysql： mysql -u root # 4.修改数据库并给root用户添加权限 use mysql; update user set select_priv=‘Y’,Insert_priv=‘Y’,Update_priv=‘Y’,Delete_priv=‘Y’,Create_priv=‘Y’,Drop_priv=‘Y’,Reload_priv=‘Y’,File_priv=‘Y’,Grant_priv=‘Y’,References_priv=‘Y’,Index_priv=‘Y’,Alter_priv=‘Y’,Show_db_priv=‘Y’,Super_priv=‘Y’,Create_tmp_table_priv=‘Y’,Lock_tables_priv=‘Y’,Execute_priv=‘Y’,Repl_slave_priv=‘Y’,Repl_client_priv=‘Y’,Create_view_priv=‘Y’,Show_view_priv=‘Y’,Create_routine_priv=‘Y’,Alter_routine_priv=‘Y’,Create_user_priv=‘Y’,Event_priv=‘Y’,Trigger_priv=‘Y’,Create_tablespace_priv=‘Y’ WHERE user=‘root’; # 5.刷新并退出： flush privileges; exit; # 6.重启数据库 net restart mysql; # Linux为service mysql restart; # 7.</description></item><item><title>启动jar包时参数配置</title><link>/posts/springboot/%E5%90%AF%E5%8A%A8jar%E5%8C%85%E6%97%B6%E5%8F%82%E6%95%B0%E9%85%8D%E7%BD%AE/</link><pubDate>Fri, 21 Oct 2022 10:14:40 +0800</pubDate><author>QiMington</author><guid>/posts/springboot/%E5%90%AF%E5%8A%A8jar%E5%8C%85%E6%97%B6%E5%8F%82%E6%95%B0%E9%85%8D%E7%BD%AE/</guid><description><![CDATA[【SpringBoot】java -jar xxx.jar 指定配置 springboot会按照下列优先级来
springboot会按照下列优先级来加载application.property配置文件：优先级由高到低
1、jar包同级目录的config目录下
2、jar包同级目录的application.property
3、classpath下的/config目录
4、classpath下根目录的配置文件
如果不想要这些目录下的配置文件为最高级，我们也可以自己使用如下命令指定配置文件：
1  java -jar -Dspring.config.location=D:\config\config.properties demo-0.0.1-SNAPSHOT.jar   Windows 指定端口
1  java -jar springboot.jar --server.port=8181   指定配置文件
1  java -jar springboot.jar --spring.profiles.active=dev   同时指定端口与配置文件
1  java -jar springboot.jar --server.port=8181 --spring.profiles.active=dev   Linux 后台服务方式启动
1  nohup java -jar springboot.jar --server.port=8181 &gt;outlog.log 2&gt;&amp;1 &amp;   加载服务器配置文件application-dev.yml
1  nohup java -Dserver.port=8086 -Dspring.config.additional-location=./application-dev.yml -jar .]]></description></item><item><title>MySQL使用技巧</title><link>/posts/mysql/mysql%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</link><pubDate>Tue, 06 Sep 2022 10:24:40 +0800</pubDate><author>QiMington</author><guid>/posts/mysql/mysql%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</guid><description><![CDATA[生成只读权限用户 1 2 3 4 5 6 7 8 9  # 创建用户 # create user [用户名]@[ip] identified by [密码]; create user &#39;readonly&#39;@&#39;%&#39; identified by &#39;readonlyqi4728&#39;; # 给用户赋予权限 # grant [权限] on [库.表] to [用户名]@[ip]; grant select on myblog.* to &#39;readonly&#39;@&#39;%&#39;; # grant all on sasd.* to &#39;lzs&#39;@&#39;%&#39;; # 刷新权限 flush privileges;   自动忽略重复插入 数据不存在则插入，数据已存在则忽略，可以使用MySQL ignore来实现。当primary key或者unique key重复时会自动忽略本次插入操作。
1  insert ignore into &#39;table&#39;(&#39;label&#39;) values(&#39;value&#39;);   自动判断更新或插入（多线程容易产生死锁，可以捕获异常，但不推荐，insert就insert，update就update） 数据不存在则插入，数据已存在则更新，可以使用MySQL on duplicate key update来实现。当primary key或者unique key重复时会自动执行update。]]></description></item><item><title>好用的设置</title><link>/posts/springboot/%E5%A5%BD%E7%94%A8%E7%9A%84%E8%AE%BE%E7%BD%AE/</link><pubDate>Tue, 05 Jul 2022 17:56:40 +0800</pubDate><author>QiMington</author><guid>/posts/springboot/%E5%A5%BD%E7%94%A8%E7%9A%84%E8%AE%BE%E7%BD%AE/</guid><description><![CDATA[更换默认web服务器 首先排除web依赖中默认的tomacat服务器，之后再映入替换的web服务器（这里选择的是undertow）。
1 2 3 4 5 6 7 8 9 10 11 12 13 14  &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;exclusions&gt; &lt;exclusion&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt; &lt;/exclusion&gt; &lt;/exclusions&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-undertow&lt;/artifactId&gt; &lt;/dependency&gt;   在父工程中管理子工程的依赖 在父工程中的properties标签中统一位置确定依赖包的版本号（推荐），在dependencyManagement管理依赖包。注意：此时依赖包没有被引入才能够木中
在子工程中使用groupId和artifactId引入依赖包，无需指定version。此时依赖包被引入对应的工程中。
relativePath详解 1.不加：默认是 ../pom.xml
2.在此指定
指定后将在文件系统从指定位置查找，然后是本地仓库，最后是远程仓库
(优先级 指定位置 &gt; 本地仓库 &gt; 远程仓库)
3.加上标签关闭这个特性（feature） ，将永远从repositories解析读取parent POM]]></description></item></channel></rss>