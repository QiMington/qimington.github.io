<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>笔记 - 标签 - QiMington's</title><link>/tags/%E7%AC%94%E8%AE%B0/</link><description>笔记 - 标签 - QiMington's</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Fri, 15 Mar 2024 00:24:00 +0800</lastBuildDate><atom:link href="/tags/%E7%AC%94%E8%AE%B0/" rel="self" type="application/rss+xml"/><item><title>Clash-Python环境搭建</title><link>/posts/docker/clash-python%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</link><pubDate>Fri, 15 Mar 2024 00:24:00 +0800</pubDate><author>QiMington</author><guid>/posts/docker/clash-python%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</guid><description>最开始的目的是为了通过Docker搭建一个Python开发服务器，可以让Pycharm通过ssh连接实现远程开发， 第一步就踩坑，在win上时，通过镜像centos7构建的容器中，可以正常使用systemctl在后台启动ssh服务， 当在Mac(M)上时，就出现了诸如D-BUS的错误信息。 下一步就想使用clash为它搭建一个专有的代理，该代理还可为你的软路由、Nas等网络接入设备服务。 有了代理就还想为代理部署一个看板，这个看板是独立运行的，可以同时接入多个clash代理的服务。
参考地址：https://parrotsec-cn.org/t/linux-clash-dashboard/5169 此处提供的是将clash与看板部署在一起的方案。
构建镜像 centos7-python310 1 2 # 这一步花费时间会较长 docker build . -t centos7-python310 Dockerfile
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 # 使用基础镜像 CentOS 7 FROM --platform=$TARGETPLATFORM centos:centos7 # 维护者信息 LABEL maintainer=&amp;#34;QiMington&amp;#34; # 将本地的脚本文件复制到容器中 COPY ./init-sys-env.sh /init-sys-env.sh COPY ./install-Python310.sh /install-Python310.sh COPY .</description></item><item><title>碎片笔记</title><link>/posts/hadoop/%E7%A2%8E%E7%89%87%E7%AC%94%E8%AE%B0/</link><pubDate>Fri, 29 Dec 2023 00:32:50 +0800</pubDate><author>QiMington</author><guid>/posts/hadoop/%E7%A2%8E%E7%89%87%E7%AC%94%E8%AE%B0/</guid><description>修改centos的主机名 1 vim /etc/hostname 修改centos主机名映射hosts文件 1 vim /etc/hosts 常用端口号 hadoop3.x HDFS NameNode 内部通常端口: 8020 / 9000 / 9820 HDFS NameNode 对用户的查询端口: 9870 Yarn查看任务运行情况端口: 8088 历史服务器: 19888 hadoop2.x HDFS NameNode 内部通常端口: 8020 / 9000 HDFS NameNode 对用户的查询端口: 50070 Yarn查看任务运行情况端口: 8088 历史服务器: 19888 常用配置文件 hadoop3.x core-site.xml hdfs-site.xml yarn-site.xml mapred-site.xml workers hadoop2.x core-site.xml hdfs-site.xml yarn-site.xml mapred-site.xml slaves</description></item><item><title>nginx笔记</title><link>/posts/nginx/nginx%E7%AC%94%E8%AE%B0/</link><pubDate>Sun, 19 Mar 2023 10:25:40 +0800</pubDate><author>QiMington</author><guid>/posts/nginx/nginx%E7%AC%94%E8%AE%B0/</guid><description>通过docker启动nginx见docker笔记
nginx.conf配置 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 #user nobody; worker_processes 1; #error_log logs/error.</description></item><item><title>Docker笔记</title><link>/posts/docker/docker%E7%AC%94%E8%AE%B0/</link><pubDate>Sat, 22 Oct 2022 19:27:30 +0800</pubDate><author>QiMington</author><guid>/posts/docker/docker%E7%AC%94%E8%AE%B0/</guid><description>Docker网络 1 docker network create --driver bridge --subnet 192.168.0.0/16 --gateway 192.168.0.1 mynet 通过镜像启动MySQl容器 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 # 启动mysql # -d 后台运行 # -p 端口映射 # -v 卷挂载 # --name 名字 # --net 设置网络） # -m 内存限制 # --memeory-reservation 内存的软性限制 # --memeory-swap 内存+交换分区大小总限制，设置时必须比-m大 docker run --name blog-mysql -d -p 3306:3306 -v /home/mysql/blog/conf:/etc/mysql -v/home/mysql/blog/data:/var/lib/mysql -m 600m --memory-swap 1g -e MYSQL_ROOT_PASSWORD=blogqimington1113 mysql:8.</description></item><item><title>深入</title><link>/posts/redis/%E6%B7%B1%E5%85%A5/</link><pubDate>Fri, 08 Jul 2022 21:22:40 +0800</pubDate><author>QiMington</author><guid>/posts/redis/%E6%B7%B1%E5%85%A5/</guid><description><![CDATA[事务 Redis事务本质：一组命令的集合。一个事务中的所有命令都会被序列化，在事务执行的过程中，会按照顺序执行。
因此，有特性：一次性、顺序性、排他性。
Redis事务没有隔离级别的概率，所有的命令在事务中，并没有被直接执行。只有发起执行命令exec的时候才会执行。
原子性：要么同时成功，要么同时失败
Redis单条命令是保证原子性的，但事务不保证原子性。
Redis的事务：
 开启事务（multi） 命令入队（&hellip;） 执行事务（exec）   正常执行事务
 1 2 3 4 5 6 7 8 9 10 11 12 13  127.0.0.1:6379&gt; multi	# 开启事务 OK # 命令入队 127.0.0.1:6379(TX)&gt; set k1 v1 QUEUED 127.0.0.1:6379(TX)&gt; set k2 v2 QUEUED 127.0.0.1:6379(TX)&gt; set k3 v2 QUEUED 127.0.0.1:6379(TX)&gt; exec	# 执行事务 1) OK 2) OK 3) OK    放弃事务 discard
 1 2 3 4 5 6 7 8 9 10 11 12  127.]]></description></item><item><title>三种特殊数据类型</title><link>/posts/redis/%E4%B8%89%E7%A7%8D%E7%89%B9%E6%AE%8A%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</link><pubDate>Fri, 08 Jul 2022 15:42:40 +0800</pubDate><author>QiMington</author><guid>/posts/redis/%E4%B8%89%E7%A7%8D%E7%89%B9%E6%AE%8A%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</guid><description>Geospatial 可以推算地理位置信息，方圆几里的人
geoadd 添加地理信息
1 2 3 4 5 6 7 8 9 10 11 # 添加地理位置 # 规则：两极无法直接添加，一般会下载城市数据，直接通过java程序一次性导入。 # 参数 key 值（经度、纬度、名称） # 有效经度从-180度到180度 # 有效纬度从-85.05112878度到85.05112878度 127.0.0.1:6379&amp;gt; geoadd china:city 116.40 39.90 beijing (integer) 1 127.0.0.1:6379&amp;gt; geoadd china:city 121.47 31.23 shanghai (integer) 1 127.0.0.1:6379&amp;gt; geoadd china:city 106.50 29.53 chongqing 114.05 22.52 shengzhen 120.16 30.24 hangzhou 108.96 34.26 xian (integer) 4 geopos从key里返回所有给定位置元素的位置（经度和纬度）
1 2 3 4 5 6 7 8 9 10 11 127.</description></item><item><title>五大数据类型</title><link>/posts/redis/%E4%BA%94%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</link><pubDate>Tue, 05 Jul 2022 23:12:40 +0800</pubDate><author>QiMington</author><guid>/posts/redis/%E4%BA%94%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</guid><description><![CDATA[Redis是一个开源（BSD许可）的，内存中的数据结构存储系统，他可以用作数据库、缓存和消息中间件MQ。它支持多种类型的数据结构，如 字符串（strings）,散列（hashes），列表（lists），集合（sets），有序集合（sorted sets）与范围查询，bitmaps,hyperloglogs和地理空间（geospatial）索引半径查询。Redis内置了 复制（replication），LUA脚本（Lua scripting），LRU驱动事件（LRU eviction），事物（transactions）和不同级别的 磁盘持久化（persistence），并通过Redis哨兵（Sentinel）和自动分区（Cluster）提供高可用性（high availability）。
Redis-Key  expire设置过期时间，可以用来做单点登录，热点数据设置
 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41  127.0.0.1:6379&gt; set name qimington OK 127.0.0.1:6379&gt; set age 21 OK 127.0.0.1:6379&gt; keys * 1) &#34;age&#34; 2) &#34;name&#34; 127.]]></description></item><item><title>Redis入门</title><link>/posts/redis/redis%E5%85%A5%E9%97%A8/</link><pubDate>Wed, 22 Jun 2022 21:26:40 +0800</pubDate><author>QiMington</author><guid>/posts/redis/redis%E5%85%A5%E9%97%A8/</guid><description>Linux下安装 下载安装包
官网地址：https://redis.io/
中文官网：http://www.redis.cn/
或者root下：wget https://github.com/redis/redis/archive/7.0.2.tar.gz
解压Redis安装包！临时文件和程序一般放在/opt
mv redis-7.0.2.tar.gz /opt
tar -zxvf redis-7.0.2.tar.gz
进入解压后的文件，可以看到redis的配置文件
cd /opt/redis-7.0.2
基本环境安装
yum install gcc-c++
查看安装是否成功
gcc -v
基本环境安装
cd /opt/redis-7.0.2
make
make install
redis的默认安装路径/usr/local/bin
将redis配置文件拷贝一份至该目录使用
mkdir qmtconfig
cp /opt/redis-7.0.2/redis.conf qmtconfig
redis默认不是后台启动，修改配置文件
vim qmtconfig/redis.conf
修改daemonize no为daemonize yes
否则启动后就关掉了
启动redis服务
使用指定配置文件启动
redis-server qmtconfig/redis.conf
连接与测试连接
redis-cli -p 6379</description></item></channel></rss>