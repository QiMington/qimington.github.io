<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Python - 标签 - QiMington's</title><link>/tags/python/</link><description>Python - 标签 - QiMington's</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Tue, 04 Jun 2024 20:49:00 +0800</lastBuildDate><atom:link href="/tags/python/" rel="self" type="application/rss+xml"/><item><title>easyocr图像文字识别</title><link>/posts/python/%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%AB/</link><pubDate>Tue, 04 Jun 2024 20:49:00 +0800</pubDate><author>QiMington</author><guid>/posts/python/%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%AB/</guid><description>EasyOCR 是一个基于 PyTorch 的 OCR（光学字符识别）库，能够识别多种语言的文本。该库由 Jaided AI 开发，旨在为开发者提供一个简单易用的 OCR 解决方案。以下是 EasyOCR 库的详细解释和分析：
1. 主要功能 多语言支持：EasyOCR 支持超过 80 种语言，包括中文、日文、韩文、拉丁语系语言等。 高精度识别：使用深度学习模型（如 CRNN 和 Transformer），提供高精度的文本识别。 轻量级：相比其他 OCR 库（如 Tesseract），EasyOCR 更轻量且易于安装和使用。 易于集成：可以很方便地与其他 Python 项目集成，特别是与计算机视觉项目。 2. 安装 使用 pip 可以非常方便地安装 EasyOCR：
1 pip install easyocr 3. 基本语法 以下是使用 EasyOCR 的基本步骤：
1 2 3 4 5 6 7 8 9 10 11 import easyocr # 初始化阅读器 reader = easyocr.</description></item><item><title>Python中的函数装饰器</title><link>/posts/python/%E5%87%BD%E6%95%B0%E8%A3%85%E9%A5%B0%E5%99%A8/</link><pubDate>Sat, 27 Apr 2024 19:52:00 +0800</pubDate><author>QiMington</author><guid>/posts/python/%E5%87%BD%E6%95%B0%E8%A3%85%E9%A5%B0%E5%99%A8/</guid><description>这个函数，允许直接作为装饰器使用或者通过函数调用的方式获得装饰器，前提是这个函数的第一个位置参数不是一个可调用的对象。
1 2 3 4 5 6 7 8 def decorator(*args, **kwargs): def wrapper(fun): def inner(*inner_args, **inner_kwargs): return fun(*inner_args, **inner_kwargs) return inner if len(args) == 1 and len(kwargs) == 0 and callable(p := args[0]): return wrapper(p) return wrapper</description></item><item><title>Clash-Python环境搭建</title><link>/posts/docker/clash-python%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</link><pubDate>Fri, 15 Mar 2024 00:24:00 +0800</pubDate><author>QiMington</author><guid>/posts/docker/clash-python%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</guid><description>最开始的目的是为了通过Docker搭建一个Python开发服务器，可以让Pycharm通过ssh连接实现远程开发， 第一步就踩坑，在win上时，通过镜像centos7构建的容器中，可以正常使用systemctl在后台启动ssh服务， 当在Mac(M)上时，就出现了诸如D-BUS的错误信息。 下一步就想使用clash为它搭建一个专有的代理，该代理还可为你的软路由、Nas等网络接入设备服务。 有了代理就还想为代理部署一个看板，这个看板是独立运行的，可以同时接入多个clash代理的服务。
参考地址：https://parrotsec-cn.org/t/linux-clash-dashboard/5169 此处提供的是将clash与看板部署在一起的方案。
构建镜像 centos7-python310 1 2 # 这一步花费时间会较长 docker build . -t centos7-python310 Dockerfile
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 # 使用基础镜像 CentOS 7 FROM --platform=$TARGETPLATFORM centos:centos7 # 维护者信息 LABEL maintainer=&amp;#34;QiMington&amp;#34; # 将本地的脚本文件复制到容器中 COPY ./init-sys-env.sh /init-sys-env.sh COPY ./install-Python310.sh /install-Python310.sh COPY .</description></item><item><title>centos中编译安装Python</title><link>/posts/python/centos%E4%B8%AD%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85python/</link><pubDate>Sat, 27 Jan 2024 17:41:25 +0800</pubDate><author>QiMington</author><guid>/posts/python/centos%E4%B8%AD%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85python/</guid><description><![CDATA[centos中编译安装Python 安装编译所需依赖 1 2 3  yum -y update yum -y install openssl-devel libffi-devel bzip2-devel yum -y groupinstall &#34;Development Tools&#34;    安装 Python 3.10 必需的 openssl &gt;= 1.1.1 由于python3.10之后版本不再支持libressl使用ssl，需要使用openssl安装来解决编译安装 python时候遇到的ssl模块导入失败的问题，这里需要用的openssl1.1.1版本或者更高版本
 1 2 3 4 5  wget https://www.openssl.org/source/openssl-1.1.1q.tar.gz --no-check-certificate tar zxf openssl-1.1.1q.tar.gz cd openssl-1.1.1q ./config --prefix=/usr/local/openssl-1.1.1 make &amp;&amp; make install   安装Python 3.10 1 2 3 4 5  wget https://www.python.org/ftp/python/3.10.8/Python-3.10.8.tgz tar zxf Python-3.10.8.tgz cd Python-3.10.8 .]]></description></item><item><title>Python实现11种特征选择策略</title><link>/posts/ml/</link><pubDate>Fri, 20 May 2022 10:50:40 +0800</pubDate><author>QiMington</author><guid>/posts/ml/</guid><description><![CDATA[Python实现11种特征选择策略 太多的特征会增加模型的复杂性和过拟合，而太少的特征会导致模型的拟合不足。将模型优化为足够复杂以使其性能可推广，但又足够简单易于训练、维护和解释是特征选择的主要工作。
“特征选择”意味着可以保留一些特征并放弃其他一些特征。本文的目的是概述一些特征选择策略：
  删除未使用的列
  删除具有缺失值的列
  不相关的特征
  低方差特征
  多重共线性
  特征系数
  p 值
  方差膨胀因子 (VIF)
  基于特征重要性的特征选择
  使用 scikit-learn 进行自动特征选择
  主成分分析 (PCA )
  该演示的数据集在 MIT 许可下发布，来自 PyCaret——一个开源的低代码机器学习库。
数据集相当干净，但我做了一些预处理。请注意，我使用此数据集来演示不同的特征选择策略如何工作，而不是构建最终模型，因此模型性能无关紧要。
首先加载数据集：
1 2 3 4  import pandas as pddata = &#39;https://raw.githubusercontent.com/pycaret/pycaret/master/datasets/automobile.csv&#39;df = pd.read_csv(data) # remove rows with &#39;?&#39;df = df[df[&#39;bore&#39;]!=&#39;?&#39;]df = df[df[&#39;stroke&#39;]!]]></description></item></channel></rss>