<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Docker - 分类 - QiMington's</title><link>/categories/docker/</link><description>Docker - 分类 - QiMington's</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Fri, 15 Mar 2024 00:24:00 +0800</lastBuildDate><atom:link href="/categories/docker/" rel="self" type="application/rss+xml"/><item><title>Clash-Python环境搭建</title><link>/posts/docker/clash-python%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</link><pubDate>Fri, 15 Mar 2024 00:24:00 +0800</pubDate><author>QiMington</author><guid>/posts/docker/clash-python%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</guid><description>最开始的目的是为了通过Docker搭建一个Python开发服务器，可以让Pycharm通过ssh连接实现远程开发， 第一步就踩坑，在win上时，通过镜像centos7构建的容器中，可以正常使用systemctl在后台启动ssh服务， 当在Mac(M)上时，就出现了诸如D-BUS的错误信息。 下一步就想使用clash为它搭建一个专有的代理，该代理还可为你的软路由、Nas等网络接入设备服务。 有了代理就还想为代理部署一个看板，这个看板是独立运行的，可以同时接入多个clash代理的服务。
参考地址：https://parrotsec-cn.org/t/linux-clash-dashboard/5169 此处提供的是将clash与看板部署在一起的方案。
构建镜像 centos7-python310 1 2 # 这一步花费时间会较长 docker build . -t centos7-python310 Dockerfile
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 # 使用基础镜像 CentOS 7 FROM --platform=$TARGETPLATFORM centos:centos7 # 维护者信息 LABEL maintainer=&amp;#34;QiMington&amp;#34; # 将本地的脚本文件复制到容器中 COPY ./init-sys-env.sh /init-sys-env.sh COPY ./install-Python310.sh /install-Python310.sh COPY .</description></item><item><title>在Docker中启动一个centos系统+代理+python</title><link>/posts/docker/%E5%9C%A8docker%E4%B8%AD%E5%90%AF%E5%8A%A8%E4%B8%80%E4%B8%AAcentos%E7%B3%BB%E7%BB%9F/</link><pubDate>Sat, 27 Jan 2024 17:41:25 +0800</pubDate><author>QiMington</author><guid>/posts/docker/%E5%9C%A8docker%E4%B8%AD%E5%90%AF%E5%8A%A8%E4%B8%80%E4%B8%AAcentos%E7%B3%BB%E7%BB%9F/</guid><description><![CDATA[在Docker中启动一个centos系统+代理+python 过程记录   通过compose文件启动容器 运行位于附件中的linux-compose.yml文件 注意其中的卷映射规则，根据自己实际情况进行修改
1  docker-compose -f linux-compose.yml up -d     进入容器运行install.sh脚本，该脚本会为你自动更新软件包并设置root账户的密码为123456
1 2 3  docker exec -it &lt;容器名&gt; /bin/bash cd / ./install.sh     设置代理
如果有需要，可以为系统设置代理
1 2 3 4  # 设置http代理 export http_proxy=http://&lt;ip&gt;:&lt;port&gt; # 设置https代理 export https_proxy=http://&lt;ip&gt;:&lt;port&gt;   取消代理
1 2 3 4  unset http_proxy unset https_proxy # 可进行查看是否取消成功 echo $http_proxy     附件  三个文件]]></description></item><item><title>Docker笔记</title><link>/posts/docker/docker%E7%AC%94%E8%AE%B0/</link><pubDate>Sat, 22 Oct 2022 19:27:30 +0800</pubDate><author>QiMington</author><guid>/posts/docker/docker%E7%AC%94%E8%AE%B0/</guid><description>Docker网络 1 docker network create --driver bridge --subnet 192.168.0.0/16 --gateway 192.168.0.1 mynet 通过镜像启动MySQl容器 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 # 启动mysql # -d 后台运行 # -p 端口映射 # -v 卷挂载 # --name 名字 # --net 设置网络） # -m 内存限制 # --memeory-reservation 内存的软性限制 # --memeory-swap 内存+交换分区大小总限制，设置时必须比-m大 docker run --name blog-mysql -d -p 3306:3306 -v /home/mysql/blog/conf:/etc/mysql -v/home/mysql/blog/data:/var/lib/mysql -m 600m --memory-swap 1g -e MYSQL_ROOT_PASSWORD=blogqimington1113 mysql:8.</description></item><item><title>linux安装Docker</title><link>/posts/docker/linux%E5%AE%89%E8%A3%85docker/</link><pubDate>Fri, 21 Oct 2022 12:11:30 +0800</pubDate><author>QiMington</author><guid>/posts/docker/linux%E5%AE%89%E8%A3%85docker/</guid><description><![CDATA[安装Docker 参考官方教程：https://docs.docker.com/get-docker/
windows 默认安装在C:\Program Files\Docker
解决方式：
在其它你希望的安装位置新建一个Docker文件，这里以 B:\Docker 为例
 删除如下目录 C:\Program Files\Docker 以管理员身份打开cmd（win+R =&gt; 输入cmd =&gt; ctrl+shift+enter） cmd中执行命令（mklink /j &ldquo;C:\Program Files\Docker&rdquo; &ldquo;B:\Docker&rdquo;） 执行下载的安装程序  linux 卸载旧的版本
1 2 3 4 5 6 7 8  sudo yum remove docker \  docker-client \  docker-client-latest \  docker-common \  docker-latest \  docker-latest-logrotate \  docker-logrotate \  docker-engine   需要安装包
1  sudo yum install -y yum-utils   设置镜像仓库]]></description></item></channel></rss>