<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>QiMington's</title><link>/</link><description>我在这里分享一些有趣的东西，寻找志同道合的朋友。I am here to share some interesting things and find like-minded friends.</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Tue, 07 Jan 2025 10:28:47 +0800</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml"/><item><title>Mermaid Test</title><link>/posts/mermaid/test/</link><pubDate>Tue, 07 Jan 2025 10:28:47 +0800</pubDate><author>QiMington</author><guid>/posts/mermaid/test/</guid><description><![CDATA[flowchart TB A[Start] --&gt; B{Decision} B --&gt;|Yes| C[Continue] B --&gt;|No| D[Stop]  erDiagram CUSTOMER }|..|{ DELIVERY-ADDRESS : has CUSTOMER ||--o{ ORDER : places CUSTOMER ||--o{ INVOICE : &quot;liable for&quot; DELIVERY-ADDRESS ||--o{ ORDER : receives INVOICE ||--|{ ORDER : covers ORDER ||--|{ ORDER-ITEM : includes PRODUCT-CATEGORY ||--|{ PRODUCT : contains PRODUCT ||--o{ ORDER-ITEM : &quot;ordered in&quot;  graph TD A([开始]) --&gt; B[用户访问注册页面] B --&gt; C{用户已注册？} C --&gt; |是| D[用户输入登录信息] C --&gt; |否| E[用户填写注册信息] E --&gt; F[系统验证注册信息] F --&gt; G{信息合法？} G --&gt; |是| H[注册成功，跳转登录页面] G --&gt; |否| I[注册失败，提示错误信息] H &amp; I --&gt; J([结束]) D --&gt; K[系统验证登录信息] K --&gt; |正确| J K --&gt; |错误| I ]]></description></item><item><title>easyocr图像文字识别</title><link>/posts/python/%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%AB/</link><pubDate>Tue, 04 Jun 2024 20:49:00 +0800</pubDate><author>QiMington</author><guid>/posts/python/%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%AB/</guid><description>EasyOCR 是一个基于 PyTorch 的 OCR（光学字符识别）库，能够识别多种语言的文本。该库由 Jaided AI 开发，旨在为开发者提供一个简单易用的 OCR 解决方案。以下是 EasyOCR 库的详细解释和分析：
1. 主要功能 多语言支持：EasyOCR 支持超过 80 种语言，包括中文、日文、韩文、拉丁语系语言等。 高精度识别：使用深度学习模型（如 CRNN 和 Transformer），提供高精度的文本识别。 轻量级：相比其他 OCR 库（如 Tesseract），EasyOCR 更轻量且易于安装和使用。 易于集成：可以很方便地与其他 Python 项目集成，特别是与计算机视觉项目。 2. 安装 使用 pip 可以非常方便地安装 EasyOCR：
1 pip install easyocr 3. 基本语法 以下是使用 EasyOCR 的基本步骤：
1 2 3 4 5 6 7 8 9 10 11 import easyocr # 初始化阅读器 reader = easyocr.</description></item><item><title>Python中的函数装饰器</title><link>/posts/python/%E5%87%BD%E6%95%B0%E8%A3%85%E9%A5%B0%E5%99%A8/</link><pubDate>Sat, 27 Apr 2024 19:52:00 +0800</pubDate><author>QiMington</author><guid>/posts/python/%E5%87%BD%E6%95%B0%E8%A3%85%E9%A5%B0%E5%99%A8/</guid><description>这个函数，允许直接作为装饰器使用或者通过函数调用的方式获得装饰器，前提是这个函数的第一个位置参数不是一个可调用的对象。
1 2 3 4 5 6 7 8 def decorator(*args, **kwargs): def wrapper(fun): def inner(*inner_args, **inner_kwargs): return fun(*inner_args, **inner_kwargs) return inner if len(args) == 1 and len(kwargs) == 0 and callable(p := args[0]): return wrapper(p) return wrapper</description></item><item><title>Clash-Python环境搭建</title><link>/posts/docker/clash-python%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</link><pubDate>Fri, 15 Mar 2024 00:24:00 +0800</pubDate><author>QiMington</author><guid>/posts/docker/clash-python%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</guid><description>最开始的目的是为了通过Docker搭建一个Python开发服务器，可以让Pycharm通过ssh连接实现远程开发， 第一步就踩坑，在win上时，通过镜像centos7构建的容器中，可以正常使用systemctl在后台启动ssh服务， 当在Mac(M)上时，就出现了诸如D-BUS的错误信息。 下一步就想使用clash为它搭建一个专有的代理，该代理还可为你的软路由、Nas等网络接入设备服务。 有了代理就还想为代理部署一个看板，这个看板是独立运行的，可以同时接入多个clash代理的服务。
参考地址：https://parrotsec-cn.org/t/linux-clash-dashboard/5169 此处提供的是将clash与看板部署在一起的方案。
构建镜像 centos7-python310 1 2 # 这一步花费时间会较长 docker build . -t centos7-python310 Dockerfile
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 # 使用基础镜像 CentOS 7 FROM --platform=$TARGETPLATFORM centos:centos7 # 维护者信息 LABEL maintainer=&amp;#34;QiMington&amp;#34; # 将本地的脚本文件复制到容器中 COPY ./init-sys-env.sh /init-sys-env.sh COPY ./install-Python310.sh /install-Python310.sh COPY .</description></item><item><title>GitLab安装</title><link>/posts/gitlab/gitlab%E5%AE%89%E8%A3%85/</link><pubDate>Sat, 03 Feb 2024 16:26:00 +0800</pubDate><author>QiMington</author><guid>/posts/gitlab/gitlab%E5%AE%89%E8%A3%85/</guid><description>以Docker容器的形式安装（不建议） 1. 拉取镜像 1 docker pull gitlab/gitlab-ce:latest 2. 启动容器 1 2 3 4 5 6 7 8 9 10 11 12 13 # 启动容器 docker run \ -itd \ -p 9980:80 \ -p 9922:22 \ -v /home/gitlab/etc:/etc/gitlab \ -v /home/gitlab/log:/var/log/gitlab \ -v /home/gitlab/opt:/var/opt/gitlab \ --restart always \ --privileged=true \ --name gitlab \ gitlab/gitlab-ce 接下来的配置请在容器内进行修改，不要在挂载到宿主机的文件上进行修改。否则可能出现配置更新不到容器内，或者是不能即时更新到容器内，导致gitlab启动成功，但是无法访问</description></item><item><title>centos中编译安装Python</title><link>/posts/python/centos%E4%B8%AD%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85python/</link><pubDate>Sat, 27 Jan 2024 17:41:25 +0800</pubDate><author>QiMington</author><guid>/posts/python/centos%E4%B8%AD%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85python/</guid><description><![CDATA[centos中编译安装Python 安装编译所需依赖 1 2 3  yum -y update yum -y install openssl-devel libffi-devel bzip2-devel yum -y groupinstall &#34;Development Tools&#34;    安装 Python 3.10 必需的 openssl &gt;= 1.1.1 由于python3.10之后版本不再支持libressl使用ssl，需要使用openssl安装来解决编译安装 python时候遇到的ssl模块导入失败的问题，这里需要用的openssl1.1.1版本或者更高版本
 1 2 3 4 5  wget https://www.openssl.org/source/openssl-1.1.1q.tar.gz --no-check-certificate tar zxf openssl-1.1.1q.tar.gz cd openssl-1.1.1q ./config --prefix=/usr/local/openssl-1.1.1 make &amp;&amp; make install   安装Python 3.10 1 2 3 4 5  wget https://www.python.org/ftp/python/3.10.8/Python-3.10.8.tgz tar zxf Python-3.10.8.tgz cd Python-3.10.8 .]]></description></item><item><title>在Docker中启动一个centos系统+代理+python</title><link>/posts/docker/%E5%9C%A8docker%E4%B8%AD%E5%90%AF%E5%8A%A8%E4%B8%80%E4%B8%AAcentos%E7%B3%BB%E7%BB%9F/</link><pubDate>Sat, 27 Jan 2024 17:41:25 +0800</pubDate><author>QiMington</author><guid>/posts/docker/%E5%9C%A8docker%E4%B8%AD%E5%90%AF%E5%8A%A8%E4%B8%80%E4%B8%AAcentos%E7%B3%BB%E7%BB%9F/</guid><description><![CDATA[在Docker中启动一个centos系统+代理+python 过程记录   通过compose文件启动容器 运行位于附件中的linux-compose.yml文件 注意其中的卷映射规则，根据自己实际情况进行修改
1  docker-compose -f linux-compose.yml up -d     进入容器运行install.sh脚本，该脚本会为你自动更新软件包并设置root账户的密码为123456
1 2 3  docker exec -it &lt;容器名&gt; /bin/bash cd / ./install.sh     设置代理
如果有需要，可以为系统设置代理
1 2 3 4  # 设置http代理 export http_proxy=http://&lt;ip&gt;:&lt;port&gt; # 设置https代理 export https_proxy=http://&lt;ip&gt;:&lt;port&gt;   取消代理
1 2 3 4  unset http_proxy unset https_proxy # 可进行查看是否取消成功 echo $http_proxy     附件  三个文件]]></description></item><item><title>解决ssh连接linux(docker)系统特别慢的问题</title><link>/posts/linux/%E8%A7%A3%E5%86%B3ssh%E8%BF%9E%E6%8E%A5linux%E7%89%B9%E5%88%AB%E6%85%A2/</link><pubDate>Sat, 27 Jan 2024 17:41:25 +0800</pubDate><author>QiMington</author><guid>/posts/linux/%E8%A7%A3%E5%86%B3ssh%E8%BF%9E%E6%8E%A5linux%E7%89%B9%E5%88%AB%E6%85%A2/</guid><description>解决ssh连接linux(docker)系统特别慢的问题 原因 SSH的反向DNS解析会消耗大量时间 GSS认证会消耗时间 解决 修改配置文件/etc/ssh/sshd_config 1 2 3 4 5 # 关闭DNS解析 UseDns no # 关闭GSS认证（不关闭这个似乎也能解决问题） GSSAPIAuthentication no 重启linux</description></item><item><title>在parallel中为centos虚拟机分配固定ip</title><link>/posts/hadoop/%E5%9C%A8parallel%E4%B8%AD%E4%B8%BAcentos%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%88%86%E9%85%8D%E5%9B%BA%E5%AE%9Aip/</link><pubDate>Fri, 29 Dec 2023 00:33:50 +0800</pubDate><author>QiMington</author><guid>/posts/hadoop/%E5%9C%A8parallel%E4%B8%AD%E4%B8%BAcentos%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%88%86%E9%85%8D%E5%9B%BA%E5%AE%9Aip/</guid><description><![CDATA[查看网卡 1 2 3  ifconfig # 或者 # ip addr   配置网卡文件 这里以修改网卡eth0为例
1  cd /etc/sysconfig/network-scripts/   如果有对应的网卡配置文件 则打开对应的配置文件
1  vim ifcfg-eth0   分别做出更新和新增配置操作，其中新增配置内容从Parallel虚拟机--&gt;设置--&gt;网络--&gt;高级--&gt;打开网络首选项--&gt;Shared查看。
1 2 3 4 5 6 7 8  # 更新 BOOTPROTO=static ONBOOT=yes # 新增 IADDR=10.211.55.100 # 你要分配的固定ip GATEWAY=10.211.55.1 # 网关地址 NETMASK=255.255.255.0 # 子网掩码 DNS1=10.211.55.1 # 域名解析器地址   如果没有对应的网卡配置文件   随便复制一份网卡配置文件并命名为你需要的网卡名
1 2  # 这里以网卡eth0为例 cp ifcfg-enp0s5 ifcfg-eth0     查询网卡UUID信息，记下UUID值]]></description></item><item><title>碎片笔记</title><link>/posts/hadoop/%E7%A2%8E%E7%89%87%E7%AC%94%E8%AE%B0/</link><pubDate>Fri, 29 Dec 2023 00:32:50 +0800</pubDate><author>QiMington</author><guid>/posts/hadoop/%E7%A2%8E%E7%89%87%E7%AC%94%E8%AE%B0/</guid><description>修改centos的主机名 1 vim /etc/hostname 修改centos主机名映射hosts文件 1 vim /etc/hosts 常用端口号 hadoop3.x HDFS NameNode 内部通常端口: 8020 / 9000 / 9820 HDFS NameNode 对用户的查询端口: 9870 Yarn查看任务运行情况端口: 8088 历史服务器: 19888 hadoop2.x HDFS NameNode 内部通常端口: 8020 / 9000 HDFS NameNode 对用户的查询端口: 50070 Yarn查看任务运行情况端口: 8088 历史服务器: 19888 常用配置文件 hadoop3.x core-site.xml hdfs-site.xml yarn-site.xml mapred-site.xml workers hadoop2.x core-site.xml hdfs-site.xml yarn-site.xml mapred-site.xml slaves</description></item></channel></rss>